---
version: '2'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.3.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-enterprise-kafka:5.3.1
    container_name: kafka
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 101
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENERS: LISTENER_INT://0.0.0.0:9092,LISTENER_EXT://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: LISTENER_INT://kafka:9092,LISTENER_EXT://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_INT:PLAINTEXT,LISTENER_EXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_INT

  producer1:
    container_name: producer1
    build: ./java-producer-avro
    volumes:
      - ./java-producer-avro/drivers:/app/project/drivers
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      DRIVER_ID: driver-1
    command: "bash -c 'until kafkacat -b kafka:9092 -L | grep driver-augmented; \
                      do sleep 1; \
                      echo waiting for topic; \
                      done; \
                      java -classpath \"lib/*\" clients.Producer'"

  producer2:
    container_name: producer2
    build: ./java-producer-avro
    volumes:
      - ./java-producer-avro/drivers:/app/project/drivers
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      DRIVER_ID: driver-2
    command: "bash -c 'until kafkacat -b kafka:9092 -L | grep driver-augmented; \
                      do sleep 1; \
                      echo waiting for topic; \
                      done; \
                      java -classpath \"lib/*\" clients.Producer'"

  producer3:
    container_name: producer3
    build: ./java-producer-avro
    volumes:
      - ./java-producer-avro/drivers:/app/project/drivers
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      DRIVER_ID: driver-3
    command: "bash -c 'until kafkacat -b kafka:9092 -L | grep driver-augmented; \
                      do sleep 1; \
                      echo waiting for topic; \
                      done; \
                      java -classpath \"lib/*\" clients.Producer'"
                        
  producer4:
    container_name: producer4
    build: ./java-producer-avro
    volumes:
      - ./java-producer-avro/drivers:/app/project/drivers
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      DRIVER_ID: driver-4
    command: "bash -c 'until kafkacat -b kafka:9092 -L | grep driver-augmented; \
                      do sleep 1; \
                      echo waiting for topic; \
                      done; \
                      java -classpath \"lib/*\" clients.Producer'"

  producer5:
    container_name: producer5
    build: ./java-producer-avro
    volumes:
      - ./java-producer-avro/drivers:/app/project/drivers
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      DRIVER_ID: driver-5
    command: "bash -c 'until kafkacat -b kafka:9092 -L | grep driver-augmented; \
                      do sleep 1; \
                      echo waiting for topic; \
                      done; \
                      java -classpath \"lib/*\" clients.Producer'"

  # streams:
  #   container_name: streams
  #   build: ./streams
  #   environment:
  #     BOOTSTRAP_SERVERS: kafka:9092

  webserver:
    container_name: webserver
    build: ./webserver-avro
    volumes:
      - ./webserver-avro:/home/node/app
      - /home/node/app/node_modules/
    ports:
      - 3000:3000
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
    command: "bash -c 'until curl schema-registry:8081/subjects/driver-augmented-avro-value/versions/1 | grep schema ; \
                      do sleep 1; \
                      echo waiting for schema; \
                      done; \
                      npm run start'"

  schema-registry:
    image: confluentinc/cp-schema-registry:5.3.1
    container_name: schema-registry
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:9092'

  ksql-server:
    image: confluentinc/cp-ksql-server:5.3.1
    container_name: ksql-server
    ports:
      - "8088:8088"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"
      KSQL_BOOTSTRAP_SERVERS: "kafka:9092"
      KSQL_HOST_NAME: ksql-server
      KSQL_APPLICATION_ID: "dev-class"
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"

  nginx:
    image: nginx:1.15-alpine
    container_name: nginx
    depends_on:
      - webserver
    ports:
      - 80:8080
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d

  postgres:
    image: postgres:11.2-alpine
    container_name: postgres
    volumes:
      - ./postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    ports:
      - 5432:5432

  connect:
    image: confluentinc/cp-kafka-connect:5.3.1
    container_name: connect
    restart: always
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_GROUP_ID: "connect"
      CONNECT_CONFIG_STORAGE_TOPIC: "connect-config"
      CONNECT_OFFSET_STORAGE_TOPIC: "connect-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "connect-status"
      CONNECT_REPLICATION_FACTOR: 1
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_VALUE_CONVERTER: "io.confluent.connect.avro.AvroConverter"
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_PLUGIN_PATH: /usr/share/java
      CONNECT_REST_ADVERTISED_HOST_NAME: "connect"

  # todo: the driver topic should be a compacted topic
  populate:
    image: confluentinc/cp-enterprise-kafka:5.3.1
    container_name: populate
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b kafka:9092 1 300 && \
                       echo Creating topics... && \
                       kafka-topics --bootstrap-server kafka:9092 --create --topic driver --partitions 3 --replication-factor 1 && \
                       kafka-topics --bootstrap-server kafka:9092 --create --topic driver-positions --partitions 3 --replication-factor 1 && \
                       kafka-topics --bootstrap-server kafka:9092 --create --topic driver-avro --partitions 3 --replication-factor 1 && \
                       kafka-topics --bootstrap-server kafka:9092 --create --topic driver-positions-avro --partitions 3 --replication-factor 1 && \
                       kafka-topics --bootstrap-server kafka:9092 --create --topic driver-distance-avro --partitions 3 --replication-factor 1 && \
                       kafka-topics --bootstrap-server kafka:9092 --create --topic driver-augmented-avro --partitions 3 --replication-factor 1'"

